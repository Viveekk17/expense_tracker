AWSTemplateFormatVersion: '2010-09-09'
Description: 'Walence - Student Expense Tracking Application'

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Stage/environment to deploy

Resources:
  # Cognito User Pool for Authentication
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub Walence-UserPool-${Stage}
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true

  # User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub Walence-Client-${Stage}
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED

  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub Walence-Users-${Stage}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH

  ExpensesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub Walence-Expenses-${Stage}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: expenseId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: expenseId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # S3 Bucket for Reports
  ReportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub walence-reports-${Stage}-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3000

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt UsersTable.Arn
                  - !GetAtt ExpensesTable.Arn
                  - !Sub ${ExpensesTable.Arn}/index/*
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub ${ReportsBucket.Arn}/*

  # Lambda Functions
  UsersFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub Walence-Users-${Stage}
      Runtime: nodejs18.x
      Handler: users.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          // Placeholder - Will be replaced with actual code during deployment
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Timeout: 30
      MemorySize: 128

  ExpensesFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub Walence-Expenses-${Stage}
      Runtime: nodejs18.x
      Handler: expenses.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          // Placeholder - Will be replaced with actual code during deployment
      Environment:
        Variables:
          EXPENSES_TABLE: !Ref ExpensesTable
      Timeout: 30
      MemorySize: 128

  ReportsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub Walence-Reports-${Stage}
      Runtime: nodejs18.x
      Handler: reports.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          // Placeholder - Will be replaced with actual code during deployment
      Environment:
        Variables:
          EXPENSES_TABLE: !Ref ExpensesTable
          REPORTS_BUCKET: !Ref ReportsBucket
      Timeout: 30
      MemorySize: 128

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub Walence-API-${Stage}
      Description: API for Walence
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resources
  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: users

  UserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref UsersResource
      PathPart: '{userId}'

  ExpensesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: expenses

  ExpenseIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref ExpensesResource
      PathPart: '{expenseId}'

  UserExpensesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref ExpensesResource
      PathPart: user

  UserExpensesUserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref UserExpensesResource
      PathPart: '{userId}'

  ReportsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: reports

  ReportsUserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref ReportsResource
      PathPart: '{userId}'

  # API Gateway Methods and Integrations (simplified for brevity)
  # In a real deployment, you would define methods for all endpoints

  # Authorizer for API Gateway
  ApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub Walence-Authorizer-${Stage}
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ApiGateway
      ProviderARNs:
        - !GetAtt UserPool.Arn

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - UsersResource
      - UserIdResource
      - ExpensesResource
      - ExpenseIdResource
      - UserExpensesResource
      - UserExpensesUserIdResource
      - ReportsResource
      - ReportsUserIdResource
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Stage

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolId

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolClientId

  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
    Export:
      Name: !Sub ${AWS::StackName}-ApiEndpoint

  ReportsBucketName:
    Description: S3 bucket for expense reports
    Value: !Ref ReportsBucket
    Export:
      Name: !Sub ${AWS::StackName}-ReportsBucket 